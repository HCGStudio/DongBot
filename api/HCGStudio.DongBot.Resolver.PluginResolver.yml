### YamlMime:ManagedReference
items:
- uid: HCGStudio.DongBot.Resolver.PluginResolver
  commentId: T:HCGStudio.DongBot.Resolver.PluginResolver
  id: PluginResolver
  parent: HCGStudio.DongBot.Resolver
  children:
  - HCGStudio.DongBot.Resolver.PluginResolver.#ctor(Microsoft.Extensions.Logging.ILogger{HCGStudio.DongBot.Resolver.PluginResolver})
  - HCGStudio.DongBot.Resolver.PluginResolver.GroupAtMeMethodDirectory
  - HCGStudio.DongBot.Resolver.PluginResolver.GroupMethodDirectory
  - HCGStudio.DongBot.Resolver.PluginResolver.Load(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.Assembly,System.Boolean)
  - HCGStudio.DongBot.Resolver.PluginResolver.LoadBuiltinServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  - HCGStudio.DongBot.Resolver.PluginResolver.PrivateMethodList
  - HCGStudio.DongBot.Resolver.PluginResolver.ScheduledTaskDictionary
  - HCGStudio.DongBot.Resolver.PluginResolver.Services
  langs:
  - csharp
  - vb
  name: PluginResolver
  nameWithType: PluginResolver
  fullName: HCGStudio.DongBot.Resolver.PluginResolver
  type: Class
  source:
    remote:
      path: HCGStudio.DongBot.Resolver/PluginResolver.cs
      branch: master
      repo: https://github.com/HCGStudio/DongBot.git
    id: PluginResolver
    path: HCGStudio.DongBot.Resolver/PluginResolver.cs
    startLine: 14
  assemblies:
  - HCGStudio.DongBot.Resolver
  namespace: HCGStudio.DongBot.Resolver
  summary: "\n为Dong! Bot提供插件解析器\n"
  example: []
  syntax:
    content: public class PluginResolver
    content.vb: Public Class PluginResolver
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: HCGStudio.DongBot.Resolver.PluginResolver.#ctor(Microsoft.Extensions.Logging.ILogger{HCGStudio.DongBot.Resolver.PluginResolver})
  commentId: M:HCGStudio.DongBot.Resolver.PluginResolver.#ctor(Microsoft.Extensions.Logging.ILogger{HCGStudio.DongBot.Resolver.PluginResolver})
  id: '#ctor(Microsoft.Extensions.Logging.ILogger{HCGStudio.DongBot.Resolver.PluginResolver})'
  parent: HCGStudio.DongBot.Resolver.PluginResolver
  langs:
  - csharp
  - vb
  name: PluginResolver(ILogger<PluginResolver>)
  nameWithType: PluginResolver.PluginResolver(ILogger<PluginResolver>)
  fullName: HCGStudio.DongBot.Resolver.PluginResolver.PluginResolver(Microsoft.Extensions.Logging.ILogger<HCGStudio.DongBot.Resolver.PluginResolver>)
  type: Constructor
  source:
    remote:
      path: HCGStudio.DongBot.Resolver/PluginResolver.cs
      branch: master
      repo: https://github.com/HCGStudio/DongBot.git
    id: .ctor
    path: HCGStudio.DongBot.Resolver/PluginResolver.cs
    startLine: 22
  assemblies:
  - HCGStudio.DongBot.Resolver
  namespace: HCGStudio.DongBot.Resolver
  summary: "\n创建一个新的插件解析器，请使用依赖注入的框架创建实例，直接调用可能会出现问题\n"
  example: []
  syntax:
    content: public PluginResolver(ILogger<PluginResolver> logger)
    parameters:
    - id: logger
      type: Microsoft.Extensions.Logging.ILogger{HCGStudio.DongBot.Resolver.PluginResolver}
      description: 日志记录类
    content.vb: Public Sub New(logger As ILogger(Of PluginResolver))
  overload: HCGStudio.DongBot.Resolver.PluginResolver.#ctor*
  nameWithType.vb: PluginResolver.PluginResolver(ILogger(Of PluginResolver))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: HCGStudio.DongBot.Resolver.PluginResolver.PluginResolver(Microsoft.Extensions.Logging.ILogger(Of HCGStudio.DongBot.Resolver.PluginResolver))
  name.vb: PluginResolver(ILogger(Of PluginResolver))
- uid: HCGStudio.DongBot.Resolver.PluginResolver.GroupMethodDirectory
  commentId: P:HCGStudio.DongBot.Resolver.PluginResolver.GroupMethodDirectory
  id: GroupMethodDirectory
  parent: HCGStudio.DongBot.Resolver.PluginResolver
  langs:
  - csharp
  - vb
  name: GroupMethodDirectory
  nameWithType: PluginResolver.GroupMethodDirectory
  fullName: HCGStudio.DongBot.Resolver.PluginResolver.GroupMethodDirectory
  type: Property
  source:
    remote:
      path: HCGStudio.DongBot.Resolver/PluginResolver.cs
      branch: master
      repo: https://github.com/HCGStudio/DongBot.git
    id: GroupMethodDirectory
    path: HCGStudio.DongBot.Resolver/PluginResolver.cs
    startLine: 30
  assemblies:
  - HCGStudio.DongBot.Resolver
  namespace: HCGStudio.DongBot.Resolver
  summary: "\n服务名称与群组内触发方法对应的字典\n"
  example: []
  syntax:
    content: public Dictionary<string, List<(Type, MethodInfo)>> GroupMethodDirectory { get; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.ValueTuple{System.Type,System.Reflection.MethodInfo}}}
    content.vb: Public ReadOnly Property GroupMethodDirectory As Dictionary(Of String, List(Of(Type, MethodInfo)))
  overload: HCGStudio.DongBot.Resolver.PluginResolver.GroupMethodDirectory*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: HCGStudio.DongBot.Resolver.PluginResolver.GroupAtMeMethodDirectory
  commentId: P:HCGStudio.DongBot.Resolver.PluginResolver.GroupAtMeMethodDirectory
  id: GroupAtMeMethodDirectory
  parent: HCGStudio.DongBot.Resolver.PluginResolver
  langs:
  - csharp
  - vb
  name: GroupAtMeMethodDirectory
  nameWithType: PluginResolver.GroupAtMeMethodDirectory
  fullName: HCGStudio.DongBot.Resolver.PluginResolver.GroupAtMeMethodDirectory
  type: Property
  source:
    remote:
      path: HCGStudio.DongBot.Resolver/PluginResolver.cs
      branch: master
      repo: https://github.com/HCGStudio/DongBot.git
    id: GroupAtMeMethodDirectory
    path: HCGStudio.DongBot.Resolver/PluginResolver.cs
    startLine: 36
  assemblies:
  - HCGStudio.DongBot.Resolver
  namespace: HCGStudio.DongBot.Resolver
  summary: "\n服务名称与群组内指定触发方法对应的字典\n"
  example: []
  syntax:
    content: public Dictionary<string, List<(Type, MethodInfo)>> GroupAtMeMethodDirectory { get; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.ValueTuple{System.Type,System.Reflection.MethodInfo}}}
    content.vb: Public ReadOnly Property GroupAtMeMethodDirectory As Dictionary(Of String, List(Of(Type, MethodInfo)))
  overload: HCGStudio.DongBot.Resolver.PluginResolver.GroupAtMeMethodDirectory*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: HCGStudio.DongBot.Resolver.PluginResolver.PrivateMethodList
  commentId: P:HCGStudio.DongBot.Resolver.PluginResolver.PrivateMethodList
  id: PrivateMethodList
  parent: HCGStudio.DongBot.Resolver.PluginResolver
  langs:
  - csharp
  - vb
  name: PrivateMethodList
  nameWithType: PluginResolver.PrivateMethodList
  fullName: HCGStudio.DongBot.Resolver.PluginResolver.PrivateMethodList
  type: Property
  source:
    remote:
      path: HCGStudio.DongBot.Resolver/PluginResolver.cs
      branch: master
      repo: https://github.com/HCGStudio/DongBot.git
    id: PrivateMethodList
    path: HCGStudio.DongBot.Resolver/PluginResolver.cs
    startLine: 42
  assemblies:
  - HCGStudio.DongBot.Resolver
  namespace: HCGStudio.DongBot.Resolver
  summary: "\n私聊触发方法的列表\n"
  example: []
  syntax:
    content: public List<(Type, MethodInfo)> PrivateMethodList { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{System.ValueTuple{System.Type,System.Reflection.MethodInfo}}
    content.vb: Public ReadOnly Property PrivateMethodList As List(Of(Type, MethodInfo))
  overload: HCGStudio.DongBot.Resolver.PluginResolver.PrivateMethodList*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: HCGStudio.DongBot.Resolver.PluginResolver.ScheduledTaskDictionary
  commentId: P:HCGStudio.DongBot.Resolver.PluginResolver.ScheduledTaskDictionary
  id: ScheduledTaskDictionary
  parent: HCGStudio.DongBot.Resolver.PluginResolver
  langs:
  - csharp
  - vb
  name: ScheduledTaskDictionary
  nameWithType: PluginResolver.ScheduledTaskDictionary
  fullName: HCGStudio.DongBot.Resolver.PluginResolver.ScheduledTaskDictionary
  type: Property
  source:
    remote:
      path: HCGStudio.DongBot.Resolver/PluginResolver.cs
      branch: master
      repo: https://github.com/HCGStudio/DongBot.git
    id: ScheduledTaskDictionary
    path: HCGStudio.DongBot.Resolver/PluginResolver.cs
    startLine: 47
  assemblies:
  - HCGStudio.DongBot.Resolver
  namespace: HCGStudio.DongBot.Resolver
  summary: "\n计划任务的时间与方法对应的字典\n"
  example: []
  syntax:
    content: public Dictionary<(int, int), List<(Type, MethodInfo)>> ScheduledTaskDictionary { get; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.ValueTuple{System.Int32,System.Int32},System.Collections.Generic.List{System.ValueTuple{System.Type,System.Reflection.MethodInfo}}}
    content.vb: Public ReadOnly Property ScheduledTaskDictionary As Dictionary(Of(Integer, Integer), List(Of(Type, MethodInfo)))
  overload: HCGStudio.DongBot.Resolver.PluginResolver.ScheduledTaskDictionary*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: HCGStudio.DongBot.Resolver.PluginResolver.Services
  commentId: P:HCGStudio.DongBot.Resolver.PluginResolver.Services
  id: Services
  parent: HCGStudio.DongBot.Resolver.PluginResolver
  langs:
  - csharp
  - vb
  name: Services
  nameWithType: PluginResolver.Services
  fullName: HCGStudio.DongBot.Resolver.PluginResolver.Services
  type: Property
  source:
    remote:
      path: HCGStudio.DongBot.Resolver/PluginResolver.cs
      branch: master
      repo: https://github.com/HCGStudio/DongBot.git
    id: Services
    path: HCGStudio.DongBot.Resolver/PluginResolver.cs
    startLine: 53
  assemblies:
  - HCGStudio.DongBot.Resolver
  namespace: HCGStudio.DongBot.Resolver
  summary: "\n储存所有服务名称的哈希表\n"
  example: []
  syntax:
    content: public HashSet<ServiceAttribute> Services { get; }
    parameters: []
    return:
      type: System.Collections.Generic.HashSet{HCGStudio.DongBot.Core.Attributes.ServiceAttribute}
    content.vb: Public ReadOnly Property Services As HashSet(Of ServiceAttribute)
  overload: HCGStudio.DongBot.Resolver.PluginResolver.Services*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: HCGStudio.DongBot.Resolver.PluginResolver.LoadBuiltinServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  commentId: M:HCGStudio.DongBot.Resolver.PluginResolver.LoadBuiltinServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  id: LoadBuiltinServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  parent: HCGStudio.DongBot.Resolver.PluginResolver
  langs:
  - csharp
  - vb
  name: LoadBuiltinServices(IServiceCollection)
  nameWithType: PluginResolver.LoadBuiltinServices(IServiceCollection)
  fullName: HCGStudio.DongBot.Resolver.PluginResolver.LoadBuiltinServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  type: Method
  source:
    remote:
      path: HCGStudio.DongBot.Resolver/PluginResolver.cs
      branch: master
      repo: https://github.com/HCGStudio/DongBot.git
    id: LoadBuiltinServices
    path: HCGStudio.DongBot.Resolver/PluginResolver.cs
    startLine: 59
  assemblies:
  - HCGStudio.DongBot.Resolver
  namespace: HCGStudio.DongBot.Resolver
  summary: "\n加载自带自带服务\n"
  example: []
  syntax:
    content: public void LoadBuiltinServices(IServiceCollection services)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: 依赖注入服务集合
    content.vb: Public Sub LoadBuiltinServices(services As IServiceCollection)
  overload: HCGStudio.DongBot.Resolver.PluginResolver.LoadBuiltinServices*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: HCGStudio.DongBot.Resolver.PluginResolver.Load(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.Assembly,System.Boolean)
  commentId: M:HCGStudio.DongBot.Resolver.PluginResolver.Load(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.Assembly,System.Boolean)
  id: Load(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.Assembly,System.Boolean)
  parent: HCGStudio.DongBot.Resolver.PluginResolver
  langs:
  - csharp
  - vb
  name: Load(IServiceCollection, Assembly, Boolean)
  nameWithType: PluginResolver.Load(IServiceCollection, Assembly, Boolean)
  fullName: HCGStudio.DongBot.Resolver.PluginResolver.Load(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Reflection.Assembly, System.Boolean)
  type: Method
  source:
    remote:
      path: HCGStudio.DongBot.Resolver/PluginResolver.cs
      branch: master
      repo: https://github.com/HCGStudio/DongBot.git
    id: Load
    path: HCGStudio.DongBot.Resolver/PluginResolver.cs
    startLine: 73
  assemblies:
  - HCGStudio.DongBot.Resolver
  namespace: HCGStudio.DongBot.Resolver
  summary: "\n加载指定插件\n"
  example: []
  syntax:
    content: public void Load(IServiceCollection services, Assembly assembly, bool builtIn = false)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: 依赖注入服务集合
    - id: assembly
      type: System.Reflection.Assembly
      description: 依赖的汇编
    - id: builtIn
      type: System.Boolean
      description: 是否为额外添加的内置插件
    content.vb: Public Sub Load(services As IServiceCollection, assembly As Assembly, builtIn As Boolean = False)
  overload: HCGStudio.DongBot.Resolver.PluginResolver.Load*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: HCGStudio.DongBot.Resolver
  commentId: N:HCGStudio.DongBot.Resolver
  name: HCGStudio.DongBot.Resolver
  nameWithType: HCGStudio.DongBot.Resolver
  fullName: HCGStudio.DongBot.Resolver
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: HCGStudio.DongBot.Resolver.PluginResolver.#ctor*
  commentId: Overload:HCGStudio.DongBot.Resolver.PluginResolver.#ctor
  name: PluginResolver
  nameWithType: PluginResolver.PluginResolver
  fullName: HCGStudio.DongBot.Resolver.PluginResolver.PluginResolver
- uid: Microsoft.Extensions.Logging.ILogger{HCGStudio.DongBot.Resolver.PluginResolver}
  commentId: T:Microsoft.Extensions.Logging.ILogger{HCGStudio.DongBot.Resolver.PluginResolver}
  parent: Microsoft.Extensions.Logging
  definition: Microsoft.Extensions.Logging.ILogger`1
  name: ILogger<PluginResolver>
  nameWithType: ILogger<PluginResolver>
  fullName: Microsoft.Extensions.Logging.ILogger<HCGStudio.DongBot.Resolver.PluginResolver>
  nameWithType.vb: ILogger(Of PluginResolver)
  fullName.vb: Microsoft.Extensions.Logging.ILogger(Of HCGStudio.DongBot.Resolver.PluginResolver)
  name.vb: ILogger(Of PluginResolver)
  spec.csharp:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: HCGStudio.DongBot.Resolver.PluginResolver
    name: PluginResolver
    nameWithType: PluginResolver
    fullName: HCGStudio.DongBot.Resolver.PluginResolver
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: HCGStudio.DongBot.Resolver.PluginResolver
    name: PluginResolver
    nameWithType: PluginResolver
    fullName: HCGStudio.DongBot.Resolver.PluginResolver
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Logging.ILogger`1
  commentId: T:Microsoft.Extensions.Logging.ILogger`1
  isExternal: true
  name: ILogger<TCategoryName>
  nameWithType: ILogger<TCategoryName>
  fullName: Microsoft.Extensions.Logging.ILogger<TCategoryName>
  nameWithType.vb: ILogger(Of TCategoryName)
  fullName.vb: Microsoft.Extensions.Logging.ILogger(Of TCategoryName)
  name.vb: ILogger(Of TCategoryName)
  spec.csharp:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TCategoryName
    nameWithType: TCategoryName
    fullName: TCategoryName
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TCategoryName
    nameWithType: TCategoryName
    fullName: TCategoryName
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Logging
  commentId: N:Microsoft.Extensions.Logging
  isExternal: true
  name: Microsoft.Extensions.Logging
  nameWithType: Microsoft.Extensions.Logging
  fullName: Microsoft.Extensions.Logging
- uid: HCGStudio.DongBot.Resolver.PluginResolver.GroupMethodDirectory*
  commentId: Overload:HCGStudio.DongBot.Resolver.PluginResolver.GroupMethodDirectory
  name: GroupMethodDirectory
  nameWithType: PluginResolver.GroupMethodDirectory
  fullName: HCGStudio.DongBot.Resolver.PluginResolver.GroupMethodDirectory
- uid: System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.ValueTuple{System.Type,System.Reflection.MethodInfo}}}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.ValueTuple{System.Type,System.Reflection.MethodInfo}}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, List<ValueTuple<Type, MethodInfo>>>
  nameWithType: Dictionary<String, List<ValueTuple<Type, MethodInfo>>>
  fullName: System.Collections.Generic.Dictionary<System.String, System.Collections.Generic.List<System.ValueTuple<System.Type, System.Reflection.MethodInfo>>>
  nameWithType.vb: Dictionary(Of String, List(Of ValueTuple(Of Type, MethodInfo)))
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.Collections.Generic.List(Of System.ValueTuple(Of System.Type, System.Reflection.MethodInfo)))
  name.vb: Dictionary(Of String, List(Of ValueTuple(Of Type, MethodInfo)))
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.MethodInfo
    name: MethodInfo
    nameWithType: MethodInfo
    fullName: System.Reflection.MethodInfo
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.MethodInfo
    name: MethodInfo
    nameWithType: MethodInfo
    fullName: System.Reflection.MethodInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: HCGStudio.DongBot.Resolver.PluginResolver.GroupAtMeMethodDirectory*
  commentId: Overload:HCGStudio.DongBot.Resolver.PluginResolver.GroupAtMeMethodDirectory
  name: GroupAtMeMethodDirectory
  nameWithType: PluginResolver.GroupAtMeMethodDirectory
  fullName: HCGStudio.DongBot.Resolver.PluginResolver.GroupAtMeMethodDirectory
- uid: HCGStudio.DongBot.Resolver.PluginResolver.PrivateMethodList*
  commentId: Overload:HCGStudio.DongBot.Resolver.PluginResolver.PrivateMethodList
  name: PrivateMethodList
  nameWithType: PluginResolver.PrivateMethodList
  fullName: HCGStudio.DongBot.Resolver.PluginResolver.PrivateMethodList
- uid: System.Collections.Generic.List{System.ValueTuple{System.Type,System.Reflection.MethodInfo}}
  commentId: T:System.Collections.Generic.List{System.ValueTuple{System.Type,System.Reflection.MethodInfo}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<ValueTuple<Type, MethodInfo>>
  nameWithType: List<ValueTuple<Type, MethodInfo>>
  fullName: System.Collections.Generic.List<System.ValueTuple<System.Type, System.Reflection.MethodInfo>>
  nameWithType.vb: List(Of ValueTuple(Of Type, MethodInfo))
  fullName.vb: System.Collections.Generic.List(Of System.ValueTuple(Of System.Type, System.Reflection.MethodInfo))
  name.vb: List(Of ValueTuple(Of Type, MethodInfo))
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.MethodInfo
    name: MethodInfo
    nameWithType: MethodInfo
    fullName: System.Reflection.MethodInfo
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.MethodInfo
    name: MethodInfo
    nameWithType: MethodInfo
    fullName: System.Reflection.MethodInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: HCGStudio.DongBot.Resolver.PluginResolver.ScheduledTaskDictionary*
  commentId: Overload:HCGStudio.DongBot.Resolver.PluginResolver.ScheduledTaskDictionary
  name: ScheduledTaskDictionary
  nameWithType: PluginResolver.ScheduledTaskDictionary
  fullName: HCGStudio.DongBot.Resolver.PluginResolver.ScheduledTaskDictionary
- uid: System.Collections.Generic.Dictionary{System.ValueTuple{System.Int32,System.Int32},System.Collections.Generic.List{System.ValueTuple{System.Type,System.Reflection.MethodInfo}}}
  commentId: T:System.Collections.Generic.Dictionary{System.ValueTuple{System.Int32,System.Int32},System.Collections.Generic.List{System.ValueTuple{System.Type,System.Reflection.MethodInfo}}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<ValueTuple<Int32, Int32>, List<ValueTuple<Type, MethodInfo>>>
  nameWithType: Dictionary<ValueTuple<Int32, Int32>, List<ValueTuple<Type, MethodInfo>>>
  fullName: System.Collections.Generic.Dictionary<System.ValueTuple<System.Int32, System.Int32>, System.Collections.Generic.List<System.ValueTuple<System.Type, System.Reflection.MethodInfo>>>
  nameWithType.vb: Dictionary(Of ValueTuple(Of Int32, Int32), List(Of ValueTuple(Of Type, MethodInfo)))
  fullName.vb: System.Collections.Generic.Dictionary(Of System.ValueTuple(Of System.Int32, System.Int32), System.Collections.Generic.List(Of System.ValueTuple(Of System.Type, System.Reflection.MethodInfo)))
  name.vb: Dictionary(Of ValueTuple(Of Int32, Int32), List(Of ValueTuple(Of Type, MethodInfo)))
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.MethodInfo
    name: MethodInfo
    nameWithType: MethodInfo
    fullName: System.Reflection.MethodInfo
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.MethodInfo
    name: MethodInfo
    nameWithType: MethodInfo
    fullName: System.Reflection.MethodInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: HCGStudio.DongBot.Resolver.PluginResolver.Services*
  commentId: Overload:HCGStudio.DongBot.Resolver.PluginResolver.Services
  name: Services
  nameWithType: PluginResolver.Services
  fullName: HCGStudio.DongBot.Resolver.PluginResolver.Services
- uid: System.Collections.Generic.HashSet{HCGStudio.DongBot.Core.Attributes.ServiceAttribute}
  commentId: T:System.Collections.Generic.HashSet{HCGStudio.DongBot.Core.Attributes.ServiceAttribute}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.HashSet`1
  name: HashSet<ServiceAttribute>
  nameWithType: HashSet<ServiceAttribute>
  fullName: System.Collections.Generic.HashSet<HCGStudio.DongBot.Core.Attributes.ServiceAttribute>
  nameWithType.vb: HashSet(Of ServiceAttribute)
  fullName.vb: System.Collections.Generic.HashSet(Of HCGStudio.DongBot.Core.Attributes.ServiceAttribute)
  name.vb: HashSet(Of ServiceAttribute)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: HCGStudio.DongBot.Core.Attributes.ServiceAttribute
    name: ServiceAttribute
    nameWithType: ServiceAttribute
    fullName: HCGStudio.DongBot.Core.Attributes.ServiceAttribute
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: HCGStudio.DongBot.Core.Attributes.ServiceAttribute
    name: ServiceAttribute
    nameWithType: ServiceAttribute
    fullName: HCGStudio.DongBot.Core.Attributes.ServiceAttribute
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet`1
  commentId: T:System.Collections.Generic.HashSet`1
  isExternal: true
  name: HashSet<T>
  nameWithType: HashSet<T>
  fullName: System.Collections.Generic.HashSet<T>
  nameWithType.vb: HashSet(Of T)
  fullName.vb: System.Collections.Generic.HashSet(Of T)
  name.vb: HashSet(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: HCGStudio.DongBot.Resolver.PluginResolver.LoadBuiltinServices*
  commentId: Overload:HCGStudio.DongBot.Resolver.PluginResolver.LoadBuiltinServices
  name: LoadBuiltinServices
  nameWithType: PluginResolver.LoadBuiltinServices
  fullName: HCGStudio.DongBot.Resolver.PluginResolver.LoadBuiltinServices
- uid: Microsoft.Extensions.DependencyInjection.IServiceCollection
  commentId: T:Microsoft.Extensions.DependencyInjection.IServiceCollection
  parent: Microsoft.Extensions.DependencyInjection
  isExternal: true
  name: IServiceCollection
  nameWithType: IServiceCollection
  fullName: Microsoft.Extensions.DependencyInjection.IServiceCollection
- uid: Microsoft.Extensions.DependencyInjection
  commentId: N:Microsoft.Extensions.DependencyInjection
  isExternal: true
  name: Microsoft.Extensions.DependencyInjection
  nameWithType: Microsoft.Extensions.DependencyInjection
  fullName: Microsoft.Extensions.DependencyInjection
- uid: HCGStudio.DongBot.Resolver.PluginResolver.Load*
  commentId: Overload:HCGStudio.DongBot.Resolver.PluginResolver.Load
  name: Load
  nameWithType: PluginResolver.Load
  fullName: HCGStudio.DongBot.Resolver.PluginResolver.Load
- uid: System.Reflection.Assembly
  commentId: T:System.Reflection.Assembly
  parent: System.Reflection
  isExternal: true
  name: Assembly
  nameWithType: Assembly
  fullName: System.Reflection.Assembly
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: true
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
